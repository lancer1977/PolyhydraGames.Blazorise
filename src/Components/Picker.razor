@typeparam T where T : class
@if (Items != null)
{
    <Column>
        <p> @Title</p>

        <Select @bind-SelectedValue="@Value">
            <SelectItem TValue="object" Value="@null">
                @GetTitle(null)
            </SelectItem>
            @foreach (var item in Items)
            {
                <SelectItem Value="@item">@GetTitle(item)</SelectItem>
            }
        </Select>
    </Column>
}
else
{
    @ChildContent
}

@code {

    public Picker()
    {
        GetTitle = x => x?.ToString() ?? PlaceHolder;
    }
    [Parameter] public string? Title { get; set; }
    [Parameter] public string PlaceHolder { get; set; } = "Select an item...";
    [Parameter] public IEnumerable<T>? Items { get; set; }
    [Parameter] public Func<T?, string> GetTitle { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback<T> ValueChanged { get; set; }
    private T _value;
    [Parameter]
    public T Value
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }
}
