@typeparam T where T : class

@if (Items != null)
{
    <Column>
        <label for="@_selectId">
            <p>@Title</p>
        </label>

        <Select id="@_selectId"
                TValue="T"
                SelectedValue="_value"
                SelectedValueChanged="OnValueChanged">
            <SelectItem TValue="T" Value="@null">
                @GetTitle(null)
            </SelectItem>
            @foreach (var item in Items)
            {
                <SelectItem TValue="T" Value="@item">
                    @GetTitle(item)
                </SelectItem>
            }
        </Select>
    </Column>
}
else
{
    @ChildContent
}

@code {
    private T? _value;
    private readonly string _selectId = $"select_{Guid.NewGuid()}";

    public Picker()
    {
        // default GetTitle fallback
        GetTitle = x => x?.ToString() ?? PlaceHolder;
    }

    [Parameter] public string? Title { get; set; }
    [Parameter] public string PlaceHolder { get; set; } = "Select an item...";
    [Parameter] public IEnumerable<T>? Items { get; set; }

    /// <summary>Function to extract the label for each item.</summary>
    [Parameter] public Func<T?, string> GetTitle { get; set; }

    /// <summary>Optional content shown when Items is null.</summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }

    /// <summary>Two-way bound selected value.</summary>
    [Parameter] public T? Value { get; set; }

    [Parameter] public EventCallback<T?> ValueChanged { get; set; }

    protected override void OnParametersSet()
    {
        _value = Value;
    }

    private async Task OnValueChanged(T? newValue)
    {
        if (!EqualityComparer<T?>.Default.Equals(_value, newValue))
        {
            _value = newValue;
            Value = newValue;
            await ValueChanged.InvokeAsync(newValue);
        }
    }

    protected override void OnInitialized()
    {
        // Ensure GetTitle is not overwritten if set by consumer
        GetTitle ??= x => x?.ToString() ?? PlaceHolder;
    }
}
