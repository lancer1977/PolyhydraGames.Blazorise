@using System.Windows.Input
@using ReactiveUI
@using System
@using System.Reactive.Linq

@implements IDisposable
<Button @onclick="ShowTest">TEST!</Button>
<Modal @ref="_modal" Closing="OnModalClosing">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>@Title</ModalTitle>
            <CloseButton onclicked="@CancelDialog" />
        </ModalHeader>
        <ModalBody>
            @if (Type == DialogRequestType.Selection)
            {
                <ListGroup Flush>
                    @foreach (var item in Items)
                    {
                        <ListGroupItem @onclick="()=>SelectionCommand.Execute(item)">
                            @item.ToString()
                        </ListGroupItem>
                    }
                </ListGroup>
            }
            else
            {
                <Text>@Message</Text>
                <TextEdit Visibility="@(Type == DialogRequestType.Prompt ? Visibility.Visible : Visibility.Invisible)" @bind-Text="@Value"></TextEdit>
                <Button Command="PositiveCommand">@PositiveButton</Button>
                <Button Command="NegativeCommand">@NegativeButton</Button>
            }
        </ModalBody>
    </ModalContent>
</Modal>
@code {
    private bool _waitingForUserSelection;
    public Modal _modal;
    private IDisposable _dispose;
    public DialogRequestType Type { get; set; }
    public string Title { get; set; }
    public string Message { get; set; }
    public string Value { get; set; }
    public string PositiveButton { get; set; }
    public string NegativeButton { get; set; }
    public List<object> Items { get; set; }
    [Inject] private IObservableDialogService _dialogService { get; set; }
    public ICommand PositiveCommand { get; set; }
    public ICommand NegativeCommand { get; set; }
    public ICommand SelectionCommand { get; set; }
    public DialogRequest Request { get; set; }

    public RichDialogs()
    {
        PositiveCommand = ReactiveCommand.Create(PositiveClicked);
        NegativeCommand = ReactiveCommand.Create(NegativeClicked);
        SelectionCommand = ReactiveCommand.Create<object>(x => ObjectSelected(x));


    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _dispose = _dialogService.OnDialogRequest.Select(OnModalRequested).Subscribe(); 
    }

    private async Task NegativeClicked()
    {
        switch (Type)
        {
            case DialogRequestType.Alert:
                Request.SetResult();
                break;
            case DialogRequestType.Confirm:
                Request.SetResult(false);
                break;
            case DialogRequestType.Prompt:
                Request.SetResult(string.Empty);
                break;
            case DialogRequestType.PromptInt:
                Request.SetResult(0,true);
                break;
            case DialogRequestType.Selection:
                Request.SetSelection(string.Empty);
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        await DismissModalOnSuccess();
    }

    private Task ObjectSelected(object item)
    {
        Request.SetSelection(item);
        return DismissModalOnSuccess();
    }
    private async Task PositiveClicked()
    {
        switch (Type)
        {
            case DialogRequestType.Alert:
                Request.SetResult();
                break;
            case DialogRequestType.Confirm:
                Request.SetResult(true);
                break;
            case DialogRequestType.Prompt:
                Request.SetResult(Value);
                break;
            case DialogRequestType.Selection:
                Request.SetResult(Value);
                break;
            case DialogRequestType.PromptInt:
                Request.SetResult(int.Parse(Value));
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        await DismissModalOnSuccess();
    }

    private Task DismissModalOnSuccess()
    {
        _waitingForUserSelection = false;
        Value = string.Empty;
        return _modal.Hide();
    }

    public void ShowTest()
    {
        OnModalRequested(new DialogRequest()
            {
                Title = "Test",
                Message = "Test!!!!",
                Type = DialogRequestType.Alert

            });
    }

    private Task OnModalRequested(DialogRequest request)
    {
        _waitingForUserSelection = true;
        Title = request.Title;
        Type = request.Type;
        Message = request.Message;
        PositiveButton = request.PositiveButton;
        NegativeButton = request.NegativeButton;
        Items = request.Items;
        Request = request;

        return _modal.Show();
    }


    public void Dispose()
    {
        _dispose.Dispose();
    }

    public void CancelDialog()
    {
        Request.Cancel();
        _waitingForUserSelection = false;
    }

    private Task OnModalClosing(ModalClosingEventArgs e)
    {
        if (_waitingForUserSelection)
        {
            CancelDialog();
        }
        return Task.CompletedTask;
    }

}